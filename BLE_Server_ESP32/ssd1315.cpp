#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>

#include "ssd1315.h"

int8_t icons[NUMICONS][3] = { 0 };
const unsigned char* bitmaps[NUMICONS];
const unsigned char PROGMEM bluetooth_bmp[] = { 0x01, 0x00, 0x02, 0x80, 0x02, 0x40, 0x22, 0x20, 0x12, 0x20, 0x4a, 0x48, 0x26, 0x90, 0x33, 0x30, 0x26, 0x90, 0x4a, 0x48, 0x12, 0x20, 0x22, 0x20, 0x02, 0x40, 0x02, 0x80, 0x01, 0x00, 0x00, 0x00 };
const unsigned char PROGMEM temperature_bmp[] = { 0x1c, 0x00, 0x22, 0x02, 0x2b, 0x05, 0x2a, 0x02, 0x2b, 0x38, 0x2a, 0x60, 0x2b, 0x40, 0x2a, 0x40, 0x2a, 0x60, 0x49, 0x38, 0x9c, 0x80, 0xae, 0x80, 0xbe, 0x80, 0x9c, 0x80, 0x41, 0x00, 0x3e, 0x00 };
const unsigned char android_bmp[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x20, 0x04,
  0x10, 0x08, 0x1f, 0xf8, 0x3f, 0xfc, 0x7f, 0xfe, 0xe7, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
const unsigned char firebase_bmp[] PROGMEM = {
  0x00, 0x80, 0x01, 0xc0, 0x03, 0x60, 0x02, 0x30, 0x04, 0x10, 0x04, 0x08, 0x3e, 0x0c, 0x27, 0x04,
  0x24, 0x86, 0x24, 0x82, 0x22, 0x82, 0x22, 0x82, 0x31, 0x8c, 0x19, 0x98, 0x0f, 0x70, 0x03, 0xc0
};
const unsigned char kotlin_bmp[] PROGMEM = {
  0xfe, 0xff, 0xfd, 0xfe, 0xfb, 0xfc, 0xf7, 0xf8, 0xef, 0xf0, 0xdf, 0xe0, 0xbf, 0xc0, 0x7f, 0x80,
  0xff, 0x00, 0xfe, 0xc0, 0xfd, 0xe0, 0xfb, 0xf0, 0xf7, 0xf8, 0xef, 0xfc, 0xdf, 0xfe, 0xbf, 0xff
};
const unsigned char mysql_bmp[] PROGMEM = {
  0x60, 0x00, 0x90, 0x00, 0x9e, 0x00, 0x43, 0x00, 0x4d, 0x80, 0x64, 0xc0, 0x20, 0x40, 0x20, 0x60,
  0x20, 0x20, 0x30, 0x20, 0x20, 0x1e, 0x28, 0x01, 0x48, 0x07, 0x54, 0x04, 0x24, 0x08, 0x02, 0x06
};
const unsigned char python_bmp[] PROGMEM = {
  0x07, 0xe0, 0x0d, 0xf0, 0x0f, 0xf0, 0x01, 0xf4, 0x3f, 0xf6, 0x7f, 0xf6, 0xff, 0xef, 0xff, 0xcf,
  0xf0, 0x3f, 0xf7, 0xff, 0x6f, 0xfe, 0x2f, 0xfc, 0x0f, 0x80, 0x0f, 0xf0, 0x0f, 0xd0, 0x07, 0xe0
};
const unsigned char spring_bmp[] PROGMEM = {
  0x0f, 0xf8, 0x3f, 0xfc, 0x7f, 0xfd, 0x7f, 0xfd, 0xff, 0xf1, 0xff, 0xe1, 0xf8, 0x01, 0xf0, 0x01,
  0xe0, 0x09, 0xe0, 0x11, 0xe0, 0x61, 0xe0, 0xc3, 0xf3, 0x87, 0x7e, 0x1e, 0x37, 0xfc, 0x1f, 0xf8
};

const unsigned char* getRandomBitmap() {
  const unsigned char* bitmaps[] = { firebase_bmp, android_bmp, spring_bmp, kotlin_bmp, mysql_bmp, python_bmp };
  return bitmaps[random(6)];
}

void initSsd1315(Adafruit_SSD1306* display) {
  // Display setup
  if (!display->begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
  delay(2000);
  display->clearDisplay();
  // Initialize 'snowflake' positions
  for (int f = 0; f < NUMICONS; f++) {
    icons[f][XPOS] = random(1 - LOGO_WIDTH / 2, display->width() - LOGO_WIDTH / 2);
    icons[f][YPOS] = YOFFSET;
    icons[f][DELTAY] = random(1, 3);
    bitmaps[f] = getRandomBitmap();
  }
}

void updateBleStatus(Adafruit_SSD1306* display, bool isConnected, float temp) {
  // Assume that display is cleared
  display->drawBitmap(0, 0, temperature_bmp, 16, 16, 1);
  display->setTextColor(1);
  display->setTextSize(2);
  display->setCursor(18, 1);
  display->print(temp, 1);
  if (isConnected) {
    display->drawBitmap(114, 0, bluetooth_bmp, 14, 16, 1);
  }
  // Assume that display method is called after this function
}

void updateAnimation(Adafruit_SSD1306* display) {
  // Draw each snowflake:
  for (int f = 0; f < NUMICONS; f++) {
    display->drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmaps[f], LOGO_WIDTH, LOGO_HEIGHT, SSD1306_WHITE);
  }
  // Then update coordinates of each flake...
  for (int f = 0; f < NUMICONS; f++) {
    icons[f][YPOS] += icons[f][DELTAY];
    // If snowflake is off the bottom of the screen...
    if (icons[f][YPOS] >= display->height()) {
      // Reinitialize to a random position, just off the top
      icons[f][XPOS] = random(1 - LOGO_WIDTH / 2, display->width() - LOGO_WIDTH / 2);
      icons[f][YPOS] = YOFFSET;
      icons[f][DELTAY] = random(1, 3);
      bitmaps[f] = getRandomBitmap();
    }
  }
}